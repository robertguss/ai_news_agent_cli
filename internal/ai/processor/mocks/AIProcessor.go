// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/robertguss/ai-news-agent-cli/internal/config"

	mock "github.com/stretchr/testify/mock"

	processor "github.com/robertguss/ai-news-agent-cli/internal/ai/processor"
)

// AIProcessor is an autogenerated mock type for the AIProcessor type
type AIProcessor struct {
	mock.Mock
}

// AnalyzeContent provides a mock function with given fields: content
func (_m *AIProcessor) AnalyzeContent(content string) (*processor.AnalysisResult, error) {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzeContent")
	}

	var r0 *processor.AnalysisResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*processor.AnalysisResult, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func(string) *processor.AnalysisResult); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*processor.AnalysisResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyzeContentWithRetry provides a mock function with given fields: ctx, content, cfg
func (_m *AIProcessor) AnalyzeContentWithRetry(ctx context.Context, content string, cfg *config.Config) (*processor.AnalysisResult, error) {
	ret := _m.Called(ctx, content, cfg)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzeContentWithRetry")
	}

	var r0 *processor.AnalysisResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *config.Config) (*processor.AnalysisResult, error)); ok {
		return rf(ctx, content, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *config.Config) *processor.AnalysisResult); ok {
		r0 = rf(ctx, content, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*processor.AnalysisResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *config.Config) error); ok {
		r1 = rf(ctx, content, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAIProcessor creates a new instance of AIProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAIProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *AIProcessor {
	mock := &AIProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
